// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dispatcher/v1/task.proto

package v1

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TaskStatus int32

const (
	TaskStatusCreated   TaskStatus = 0
	TaskStatusPending   TaskStatus = 1
	TaskStatusAssigned  TaskStatus = 2
	TaskStatusEncoding  TaskStatus = 3
	TaskStatusCompleted TaskStatus = 4
	TaskStatusFailed    TaskStatus = 5
	TaskStatusCanceled  TaskStatus = 6
)

var TaskStatus_name = map[int32]string{
	0: "CREATED",
	1: "PENDING",
	2: "ASSIGNED",
	3: "ENCODING",
	4: "COMPLETED",
	5: "FAILED",
	6: "CANCELED",
}

var TaskStatus_value = map[string]int32{
	"CREATED":   0,
	"PENDING":   1,
	"ASSIGNED":  2,
	"ENCODING":  3,
	"COMPLETED": 4,
	"FAILED":    5,
	"CANCELED":  6,
}

func (x TaskStatus) String() string {
	return proto.EnumName(TaskStatus_name, int32(x))
}

func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9fa62cfa120fc1c4, []int{0}
}

type TaskInput struct {
	URI                  string   `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskInput) Reset()         { *m = TaskInput{} }
func (m *TaskInput) String() string { return proto.CompactTextString(m) }
func (*TaskInput) ProtoMessage()    {}
func (*TaskInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fa62cfa120fc1c4, []int{0}
}
func (m *TaskInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskInput.Merge(m, src)
}
func (m *TaskInput) XXX_Size() int {
	return m.Size()
}
func (m *TaskInput) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskInput.DiscardUnknown(m)
}

var xxx_messageInfo_TaskInput proto.InternalMessageInfo

func (m *TaskInput) GetURI() string {
	if m != nil {
		return m.URI
	}
	return ""
}

func (*TaskInput) XXX_MessageName() string {
	return "cloud.api.dispatcher.v1.TaskInput"
}

type TaskOutput struct {
	Path                 string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Num                  int64    `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Duration             float64  `protobuf:"fixed64,4,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskOutput) Reset()         { *m = TaskOutput{} }
func (m *TaskOutput) String() string { return proto.CompactTextString(m) }
func (*TaskOutput) ProtoMessage()    {}
func (*TaskOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fa62cfa120fc1c4, []int{1}
}
func (m *TaskOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskOutput.Merge(m, src)
}
func (m *TaskOutput) XXX_Size() int {
	return m.Size()
}
func (m *TaskOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskOutput.DiscardUnknown(m)
}

var xxx_messageInfo_TaskOutput proto.InternalMessageInfo

func (m *TaskOutput) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *TaskOutput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TaskOutput) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *TaskOutput) GetDuration() float64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (*TaskOutput) XXX_MessageName() string {
	return "cloud.api.dispatcher.v1.TaskOutput"
}

type Task struct {
	ID                    string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	OwnerID               int32       `protobuf:"varint,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	CreatedAt             *time.Time  `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty" db:"created_at"`
	Status                TaskStatus  `protobuf:"varint,4,opt,name=status,proto3,enum=cloud.api.dispatcher.v1.TaskStatus" json:"status,omitempty"`
	ProfileID             string      `protobuf:"bytes,5,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	Input                 *TaskInput  `protobuf:"bytes,6,opt,name=input,proto3" json:"input,omitempty"`
	Output                *TaskOutput `protobuf:"bytes,7,opt,name=output,proto3" json:"output,omitempty"`
	Cmdline               string      `protobuf:"bytes,8,opt,name=cmdline,proto3" json:"cmdline,omitempty"`
	ClientID              string      `protobuf:"bytes,9,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	StreamContractID      uint64      `protobuf:"varint,10,opt,name=stream_contract_id,json=streamContractId,proto3" json:"stream_contract_id,omitempty"`
	StreamContractAddress string      `protobuf:"bytes,11,opt,name=stream_contract_address,json=streamContractAddress,proto3" json:"stream_contract_address,omitempty"`
	MachineType           string      `protobuf:"bytes,12,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	StreamID              string      `protobuf:"bytes,13,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}    `json:"-"`
	XXX_unrecognized      []byte      `json:"-"`
	XXX_sizecache         int32       `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fa62cfa120fc1c4, []int{2}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return m.Size()
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Task) GetOwnerID() int32 {
	if m != nil {
		return m.OwnerID
	}
	return 0
}

func (m *Task) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Task) GetStatus() TaskStatus {
	if m != nil {
		return m.Status
	}
	return TaskStatusCreated
}

func (m *Task) GetProfileID() string {
	if m != nil {
		return m.ProfileID
	}
	return ""
}

func (m *Task) GetInput() *TaskInput {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *Task) GetOutput() *TaskOutput {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *Task) GetCmdline() string {
	if m != nil {
		return m.Cmdline
	}
	return ""
}

func (m *Task) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

func (m *Task) GetStreamContractID() uint64 {
	if m != nil {
		return m.StreamContractID
	}
	return 0
}

func (m *Task) GetStreamContractAddress() string {
	if m != nil {
		return m.StreamContractAddress
	}
	return ""
}

func (m *Task) GetMachineType() string {
	if m != nil {
		return m.MachineType
	}
	return ""
}

func (m *Task) GetStreamID() string {
	if m != nil {
		return m.StreamID
	}
	return ""
}

func (*Task) XXX_MessageName() string {
	return "cloud.api.dispatcher.v1.Task"
}
func init() {
	proto.RegisterEnum("cloud.api.dispatcher.v1.TaskStatus", TaskStatus_name, TaskStatus_value)
	golang_proto.RegisterEnum("cloud.api.dispatcher.v1.TaskStatus", TaskStatus_name, TaskStatus_value)
	proto.RegisterType((*TaskInput)(nil), "cloud.api.dispatcher.v1.TaskInput")
	golang_proto.RegisterType((*TaskInput)(nil), "cloud.api.dispatcher.v1.TaskInput")
	proto.RegisterType((*TaskOutput)(nil), "cloud.api.dispatcher.v1.TaskOutput")
	golang_proto.RegisterType((*TaskOutput)(nil), "cloud.api.dispatcher.v1.TaskOutput")
	proto.RegisterType((*Task)(nil), "cloud.api.dispatcher.v1.Task")
	golang_proto.RegisterType((*Task)(nil), "cloud.api.dispatcher.v1.Task")
}

func init() { proto.RegisterFile("dispatcher/v1/task.proto", fileDescriptor_9fa62cfa120fc1c4) }
func init() { golang_proto.RegisterFile("dispatcher/v1/task.proto", fileDescriptor_9fa62cfa120fc1c4) }

var fileDescriptor_9fa62cfa120fc1c4 = []byte{
	// 764 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xdf, 0x6e, 0xdc, 0x44,
	0x14, 0xc6, 0xeb, 0xfd, 0xbf, 0x93, 0x14, 0xcc, 0xd0, 0x36, 0xc6, 0x42, 0x6b, 0xb3, 0xa0, 0x28,
	0x20, 0xf0, 0x2a, 0x45, 0x42, 0x08, 0xae, 0x76, 0x6d, 0xb7, 0xb2, 0x54, 0x36, 0xd1, 0x24, 0xdc,
	0x70, 0x13, 0xcd, 0x7a, 0xa6, 0x9b, 0x51, 0xed, 0x19, 0xcb, 0x1e, 0x07, 0xf5, 0x0d, 0x50, 0xb8,
	0xe1, 0x05, 0x72, 0x45, 0x9f, 0x82, 0x2b, 0x2e, 0x7b, 0xc9, 0x13, 0x2c, 0xc8, 0x7d, 0x03, 0x9e,
	0x00, 0xcd, 0x8c, 0xd3, 0x6d, 0x57, 0xa2, 0x77, 0x33, 0xdf, 0xf9, 0x9d, 0x73, 0xbe, 0x33, 0xc7,
	0x06, 0x0e, 0x61, 0x55, 0x81, 0x65, 0x7a, 0x49, 0xcb, 0xd9, 0xd5, 0xf1, 0x4c, 0xe2, 0xea, 0x59,
	0x50, 0x94, 0x42, 0x0a, 0x78, 0x90, 0x66, 0xa2, 0x26, 0x01, 0x2e, 0x58, 0xb0, 0x65, 0x82, 0xab,
	0x63, 0xf7, 0xe3, 0xb5, 0x10, 0xeb, 0x8c, 0xce, 0x70, 0xc1, 0x66, 0x98, 0x73, 0x21, 0xb1, 0x64,
	0x82, 0x57, 0x26, 0xcd, 0xfd, 0x6a, 0xcd, 0xe4, 0x65, 0xbd, 0x0a, 0x52, 0x91, 0xcf, 0xd6, 0x62,
	0x2d, 0x66, 0x5a, 0x5e, 0xd5, 0x4f, 0xf5, 0x4d, 0x5f, 0xf4, 0xa9, 0xc5, 0xbd, 0xb6, 0xd8, 0x6b,
	0x4a, 0xb2, 0x9c, 0x56, 0x12, 0xe7, 0x85, 0x01, 0xa6, 0x87, 0x60, 0x7c, 0x8e, 0xab, 0x67, 0x09,
	0x2f, 0x6a, 0x09, 0x3f, 0x02, 0xdd, 0xba, 0x64, 0x8e, 0xe5, 0x5b, 0x47, 0xe3, 0xc5, 0xb0, 0xd9,
	0x78, 0xdd, 0x1f, 0x51, 0x82, 0x94, 0x36, 0x5d, 0x01, 0xa0, 0xb8, 0x93, 0x5a, 0x2a, 0x10, 0x82,
	0x5e, 0x81, 0xe5, 0xa5, 0x21, 0x91, 0x3e, 0x2b, 0x8d, 0xe3, 0x9c, 0x3a, 0x1d, 0xa3, 0xa9, 0x33,
	0xb4, 0x41, 0x97, 0xd7, 0xb9, 0xd3, 0xf5, 0xad, 0xa3, 0x2e, 0x52, 0x47, 0xe8, 0x82, 0x11, 0xa9,
	0x4b, 0x3d, 0x92, 0xd3, 0xf3, 0xad, 0x23, 0x0b, 0xbd, 0xbe, 0x4f, 0x7f, 0xed, 0x83, 0x9e, 0x6a,
	0x02, 0x1f, 0x80, 0x0e, 0x23, 0xad, 0x8d, 0x41, 0xb3, 0xf1, 0x3a, 0x49, 0x84, 0x3a, 0x8c, 0xc0,
	0x43, 0x30, 0x12, 0x3f, 0x73, 0x5a, 0x5e, 0x30, 0xa2, 0xdb, 0xf4, 0x17, 0x7b, 0xcd, 0xc6, 0x1b,
	0x9e, 0x28, 0x2d, 0x89, 0xd0, 0x50, 0x07, 0x13, 0x02, 0x11, 0x00, 0x69, 0x49, 0xb1, 0xa4, 0xe4,
	0x02, 0x4b, 0xdd, 0x7d, 0xef, 0xa1, 0x1b, 0x98, 0xa7, 0x08, 0x6e, 0x9f, 0x22, 0x38, 0xbf, 0x7d,
	0x8a, 0xc5, 0xc1, 0xbf, 0x1b, 0xef, 0x7d, 0xb2, 0xfa, 0x6e, 0xba, 0xcd, 0x9a, 0xfe, 0xf6, 0xb7,
	0x67, 0xa1, 0x71, 0x2b, 0xcc, 0x25, 0xfc, 0x1e, 0x0c, 0x2a, 0x89, 0x65, 0x5d, 0x69, 0xdb, 0xef,
	0x3d, 0xfc, 0x34, 0xf8, 0x9f, 0x05, 0x06, 0x6a, 0x84, 0x33, 0x8d, 0xa2, 0x36, 0x05, 0x7e, 0x09,
	0x40, 0x51, 0x8a, 0xa7, 0x2c, 0xa3, 0xca, 0x7a, 0x5f, 0x0f, 0x76, 0xb7, 0xd9, 0x78, 0xe3, 0x53,
	0xa3, 0x26, 0x11, 0x1a, 0xb7, 0x40, 0x42, 0xe0, 0xb7, 0xa0, 0xcf, 0xd4, 0x3e, 0x9c, 0x81, 0x76,
	0x3e, 0x7d, 0x67, 0x27, 0xbd, 0x39, 0x64, 0x12, 0x94, 0x49, 0xa1, 0x37, 0xe4, 0x0c, 0x75, 0xea,
	0xbb, 0x4d, 0x9a, 0x65, 0xa2, 0x36, 0x05, 0x3a, 0x60, 0x98, 0xe6, 0x24, 0x63, 0x9c, 0x3a, 0x23,
	0xbd, 0xc3, 0xdb, 0x2b, 0xfc, 0x1c, 0x8c, 0xd3, 0x8c, 0x51, 0x2e, 0x95, 0xfb, 0xb1, 0x76, 0xbf,
	0xdf, 0x6c, 0xbc, 0x51, 0xa8, 0xc5, 0x24, 0x42, 0x23, 0x13, 0x4e, 0x08, 0x5c, 0x00, 0x58, 0xc9,
	0x92, 0xe2, 0xfc, 0x22, 0x15, 0x5c, 0x96, 0x38, 0xd5, 0x39, 0xc0, 0xb7, 0x8e, 0x7a, 0x8b, 0x7b,
	0xcd, 0xc6, 0xb3, 0xcf, 0x74, 0x34, 0x6c, 0x83, 0x49, 0x84, 0xec, 0xea, 0x6d, 0x85, 0xc0, 0x6f,
	0xc0, 0xc1, 0x6e, 0x0d, 0x4c, 0x48, 0x49, 0xab, 0xca, 0xd9, 0xd3, 0xc6, 0xee, 0xbf, 0x9d, 0x32,
	0x37, 0x41, 0xf8, 0x09, 0xd8, 0xcf, 0x71, 0x7a, 0xc9, 0x38, 0xbd, 0x90, 0xcf, 0x0b, 0xea, 0xec,
	0x6b, 0x78, 0xaf, 0xd5, 0xce, 0x9f, 0x17, 0x7a, 0x92, 0xb6, 0x34, 0x23, 0xce, 0xdd, 0xed, 0x24,
	0xc6, 0x95, 0x9a, 0xc4, 0x84, 0x13, 0xf2, 0xc5, 0x8b, 0x8e, 0xf9, 0xe4, 0xcd, 0x2a, 0xe1, 0x14,
	0x0c, 0x43, 0x14, 0xcf, 0xcf, 0xe3, 0xc8, 0xbe, 0xe3, 0xde, 0xbf, 0xbe, 0xf1, 0x3f, 0xd8, 0x06,
	0x43, 0xf3, 0x95, 0x28, 0xe6, 0x34, 0x5e, 0x46, 0xc9, 0xf2, 0xb1, 0x6d, 0xed, 0x32, 0xa7, 0x94,
	0x13, 0xc6, 0xd7, 0xf0, 0x33, 0x30, 0x9a, 0x9f, 0x9d, 0x25, 0x8f, 0x97, 0x71, 0x64, 0x77, 0xdc,
	0x07, 0xd7, 0x37, 0x3e, 0xdc, 0x42, 0xf3, 0xaa, 0x62, 0x6b, 0x4e, 0x89, 0xa2, 0xe2, 0x65, 0x78,
	0xa2, 0x4b, 0x75, 0x77, 0xa9, 0x98, 0xa7, 0x42, 0xd7, 0x3a, 0x04, 0xe3, 0xf0, 0xe4, 0x87, 0xd3,
	0x27, 0xb1, 0x72, 0xd5, 0x73, 0x0f, 0xae, 0x6f, 0xfc, 0x0f, 0xdf, 0x70, 0x25, 0xf2, 0x22, 0xa3,
	0xca, 0x97, 0x0f, 0x06, 0x8f, 0xe6, 0xc9, 0x93, 0x38, 0xb2, 0xfb, 0xee, 0xbd, 0xeb, 0x1b, 0xdf,
	0xde, 0x42, 0x8f, 0x30, 0xcb, 0x4c, 0xbf, 0x70, 0xbe, 0x0c, 0x63, 0xc5, 0x0c, 0x76, 0xfb, 0x85,
	0x98, 0xa7, 0x34, 0xa3, 0xc4, 0x85, 0xbf, 0xfc, 0x3e, 0xb9, 0xf3, 0xc7, 0x8b, 0xc9, 0x1b, 0xef,
	0xb2, 0x70, 0x5e, 0x36, 0x13, 0xeb, 0xaf, 0x66, 0x62, 0xfd, 0xd3, 0x4c, 0xac, 0x3f, 0x5f, 0x4d,
	0xac, 0x97, 0xaf, 0x26, 0xd6, 0x4f, 0x9d, 0xab, 0xe3, 0xd5, 0x40, 0xff, 0x69, 0x5f, 0xff, 0x17,
	0x00, 0x00, 0xff, 0xff, 0x9d, 0x6f, 0xfb, 0x4a, 0x04, 0x05, 0x00, 0x00,
}

func (m *TaskInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.URI) > 0 {
		i -= len(m.URI)
		copy(dAtA[i:], m.URI)
		i = encodeVarintTask(dAtA, i, uint64(len(m.URI)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TaskOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Duration != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Duration))))
		i--
		dAtA[i] = 0x21
	}
	if m.Num != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.StreamID) > 0 {
		i -= len(m.StreamID)
		copy(dAtA[i:], m.StreamID)
		i = encodeVarintTask(dAtA, i, uint64(len(m.StreamID)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.MachineType) > 0 {
		i -= len(m.MachineType)
		copy(dAtA[i:], m.MachineType)
		i = encodeVarintTask(dAtA, i, uint64(len(m.MachineType)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.StreamContractAddress) > 0 {
		i -= len(m.StreamContractAddress)
		copy(dAtA[i:], m.StreamContractAddress)
		i = encodeVarintTask(dAtA, i, uint64(len(m.StreamContractAddress)))
		i--
		dAtA[i] = 0x5a
	}
	if m.StreamContractID != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.StreamContractID))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ClientID) > 0 {
		i -= len(m.ClientID)
		copy(dAtA[i:], m.ClientID)
		i = encodeVarintTask(dAtA, i, uint64(len(m.ClientID)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Cmdline) > 0 {
		i -= len(m.Cmdline)
		copy(dAtA[i:], m.Cmdline)
		i = encodeVarintTask(dAtA, i, uint64(len(m.Cmdline)))
		i--
		dAtA[i] = 0x42
	}
	if m.Output != nil {
		{
			size, err := m.Output.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Input != nil {
		{
			size, err := m.Input.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTask(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.ProfileID) > 0 {
		i -= len(m.ProfileID)
		copy(dAtA[i:], m.ProfileID)
		i = encodeVarintTask(dAtA, i, uint64(len(m.ProfileID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.CreatedAt != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintTask(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x1a
	}
	if m.OwnerID != 0 {
		i = encodeVarintTask(dAtA, i, uint64(m.OwnerID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintTask(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTask(dAtA []byte, offset int, v uint64) int {
	offset -= sovTask(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TaskInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.URI)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TaskOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovTask(uint64(m.Num))
	}
	if m.Duration != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.OwnerID != 0 {
		n += 1 + sovTask(uint64(m.OwnerID))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTask(uint64(m.Status))
	}
	l = len(m.ProfileID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	if m.Output != nil {
		l = m.Output.Size()
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.Cmdline)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.ClientID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.StreamContractID != 0 {
		n += 1 + sovTask(uint64(m.StreamContractID))
	}
	l = len(m.StreamContractAddress)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.MachineType)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	l = len(m.StreamID)
	if l > 0 {
		n += 1 + l + sovTask(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTask(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTask(x uint64) (n int) {
	return sovTask(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TaskInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field URI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.URI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Duration = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTask
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerID", wireType)
			}
			m.OwnerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnerID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TaskStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &TaskInput{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Output == nil {
				m.Output = &TaskOutput{}
			}
			if err := m.Output.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmdline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmdline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractID", wireType)
			}
			m.StreamContractID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamContractID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTask
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTask
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTask
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTask(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTask
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTask(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTask
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTask
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTask
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTask
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTask
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTask        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTask          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTask = fmt.Errorf("proto: unexpected end of group")
)
